from os.path import join
import numpy as np
#from constants import *
#import cv2
import pdb

class DatasetLoader(object):

  def __init__(self):
    self.load_from_save()

  def load_from_save(self):
    self._images      = np.load("/home/oleg/server_assembly/emotion/dataset/data_set_fer2013.npy")
    self._labels      = np.load("/home/oleg/server_assembly/emotion/dataset/data_labels_fer2013.npy")
    self._images_test = np.load("/home/oleg/server_assembly/emotion/dataset/test_set_fer2013.npy")
    self._labels_test = np.load("/home/oleg/server_assembly/emotion/dataset/test_labels_fer2013.npy")
    #self._images_public_test = np.load(join(SAVE_DIRECTORY, SAVE_DATASET_IMAGES_TEST_FILENAME))
    #self._labels_public_test = np.load(join(SAVE_DIRECTORY, SAVE_DATASET_LABELS_TEST_FILENAME))
    self._images      = self._images.reshape([-1, 48, 48, 1])
    self._images_test = self._images_test.reshape([-1, 48, 48, 1])
    self._labels      = self._labels.reshape([-1, 7])
    self._labels_test = self._labels_test.reshape([-1, 7])
    #self.images_public_test = self._images_public_test.reshape([-1, SIZE_FACE, SIZE_FACE, 1])
    #self.labels_public_test = self._labels_public_test.reshape([-1, len(EMOTIONS)])

  @property
  def X_train(self):
    return self._images

  @property
  def y_train(self):
    return self._labels

  @property
  def X_test(self):
    return self._images_test
 
  @property
  def y_test(self):
    return self._labels_test
  
  #@property
  #def public_images_test(self):
  #  return self.images_public_test

  #@property
  #def public_labels_test(self):
  #  return self.labels_public_test

  @property
  def num_examples(self):
    return self._num_examples
