from keras import optimizers
from keras.layers.core import Dropout, Flatten, Dense
from keras.layers.convolutional import Conv2D
from keras.layers.pooling import MaxPooling2D
from keras.layers import Input
from keras.models import Sequential, Model
from keras.callbacks import TensorBoard, ModelCheckpoint
from dataset_loader import DatasetLoader
import numpy as np
from keras.callbacks import ReduceLROnPlateau, LearningRateScheduler
import math
import keras.backend.tensorflow_backend as KTF
import tensorflow as tf
import pdb
import cv2

# learning rate schedule
def step_decay(epoch):
	initial_lrate = 0.01
	drop = 0.8
	epochs_drop = 40.0
	lrate = initial_lrate * math.pow(drop, math.floor((1+epoch)/epochs_drop))
	return lrate

class emotionPredictor:
	"""docstring for emotion_predictor"""
	def __init__(self):
		#pdb.set_trace()
		self.dataset = DatasetLoader()
		with KTF.tf.device('/gpu:0'):
			gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction = 0.1, allow_growth = False)
			session_config = tf.ConfigProto(device_count = {'GPU': 1}, allow_soft_placement = False, log_device_placement = True, gpu_options = gpu_options)
			KTF.set_session(tf.Session(config = session_config))
			model = Sequential()
			model.add(Conv2D(64, (5, 5), strides = (1, 1), activation='relu', image_shape=(48, 48, 1)))
			model.add(Dropout(0.5))
			model.add(MaxPooling2D(pool_size=(3,3), padding="same", strides=2))
			model.add(Conv2D(64, (5, 5), strides = 1, activation='relu'))
			model.add(Dropout(0.5))
			model.add(MaxPooling2D(pool_size=(3,3), padding="same", strides=2))
			model.add(Conv2D(128, (4, 4), strides = 1, activation='relu'))
			model.add(Dropout(0.5))
			model.add(Flatten())
			model.add(Dense(3072, activation='relu'))
			model.add(Dense(1024, activation='relu'))
			model.add(Dense(7, activation='softmax'))
			model_input = Input(shape = (48, 48, 1))
			output = model(model_input)

		self.model = Model(input = model_input, output = output)
		sgd = optimizers.SGD(lr = 0.0, decay = 0.0, momentum = 0.9, nesterov = False)
		self.model.compile(loss='categorical_crossentropy', optimizer = sgd, metrics = ["accuracy"])
		self.load_model()
	
	def format_image(self, image, face):
		#pdb.set_trace()
		if len(image.shape) > 2 and image.shape[2] == 3:
			image = cv2.cvtColor(image.astype(np.uint8), cv2.COLOR_BGR2GRAY)
		else:
			image = cv2.imdecode(image.astype(np.uint8), cv2.CV_LOAD_IMAGE_GRAYSCALE)
		# Chop image to face    
		image = image[face[1]:face[3], face[0]:face[2]]
		#Resize image to network size
		try:
			image = cv2.resize(image, (48, 48), interpolation = cv2.INTER_CUBIC) / 255.
		except Exception:
			print("[+] Problem during resize")
			return None
		print image.shape
		return image

	def train(self, n_epoch = 140, batch_size = 2000, shuffle = True, 
			checkpoints = "./checkpoints_lrdecay/checkpoint.hdf5", logs = "./log"):
		X_train = self.dataset.X_train
		y_train = self.dataset.y_train
		X_test = self.dataset.X_test
		y_test = self.dataset.y_test
		clbTFboard = TensorBoard(log_dir = logs, histogram_freq = 1, write_graph = False)
		checkpointer = ModelCheckpoint(filepath=checkpoints, verbose = 0,
                                       save_best_only = False)
		#reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5,
                  #patience=5, min_lr=0.00001)
        # learning schedule callback
		lrate = LearningRateScheduler(step_decay)
		clbks = [clbTFboard, checkpointer, lrate]
		
		self.model.fit(X_train, y_train, batch_size = batch_size, epochs = n_epoch,
                       validation_data=(X_test, y_test), callbacks = clbks, verbose = 1,
                       shuffle = True)
    
	def predict(self, img, face):
		img = self.format_image(img, face).reshape([-1, 48, 48, 1])
		#img = img.reshape([-1, 48, 48, 1])
		if img is not None:
		 	result = list(self.model.predict_on_batch([img])[0])
			for i in range(len(result)):
				result[i] = float(result[i])
			val, idx = max((val, idx) for (idx, val) in enumerate(result))
			print result
			if idx == 0:
				print val
			  	return 'angry'
			elif idx == 1:
				print val
			  	return 'disgusted'
			elif idx == 2:
				print val
			  	return 'fearful'
			elif idx == 3:
				print val
			  	return 'happy'
			elif idx == 4:
				print val
			  	return 'sad'
			elif idx == 5:
				print val
			  	return 'surprised'
			else:
				print val
			  	return 'neutral'
		else:
		  	return "[+] Faces are not found"

	def load_model(self, filepath = "./emotion/checkpoints/checkpoint.hdf5"):
		print "[+] Model loaded"
		self.model.load_weights(filepath)

	def save_model(self, filepath = "./checkpoints/checkpoint.hdf5"):
		self.model.load_weights(filepath)

