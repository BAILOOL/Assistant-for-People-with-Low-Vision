from __future__ import print_function
from flask import Flask, request, redirect, url_for, jsonify, send_from_directory
from time import time
import hashlib
import os

import pdb

import math
import os


import tensorflow as tf

from im2txt import configuration
from im2txt import inference_wrapper
from im2txt.inference_utils import caption_generator
from im2txt.inference_utils import vocabulary


# Directory containing model checkpoints.
CHECKPOINT_DIR="/home/oleg/Desktop/ImageCaptioning/im2txt/model"

# Vocabulary file generated by the preprocessing script.
VOCAB_FILE="/home/oleg/Desktop/ImageCaptioning/im2txt/im2txt/data/word_counts.txt"

# JPEG image file to caption.
IMAGE_FILE="/home/oleg/Desktop/ImageCaptioning/im2txt/im2txt/data/images1.jpeg"


UPLOAD_FOLDER = './uploads/'
ALLOWED_EXTENSIONS = set(['jpg', 'jpeg', 'JPG', 'JPEG', 'png', 'PNG'])

# global variables
app = Flask(__name__, static_url_path='')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

sess = None
generator = None

# helpers
def setup():
    global sess
    global generator
    # uploads
    if not os.path.exists(UPLOAD_FOLDER):
        os.makedirs(UPLOAD_FOLDER)

    g = tf.Graph()
    with g.as_default():
        model = inference_wrapper.InferenceWrapper()
        restore_fn = model.build_graph_from_config(configuration.ModelConfig(),
                                               CHECKPOINT_DIR)
    g.finalize()

    # Create the vocabulary.
    vocab = vocabulary.Vocabulary(VOCAB_FILE)

    sess = tf.Session(graph=g)
    restore_fn(sess)
    generator = caption_generator.CaptionGenerator(model, vocab)


    print('Finished setup')


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS


# routes
@app.route('/', methods=['GET'])
def index():
    return app.send_static_file('demo2.html')


@app.route('/api/upload_all', methods=['POST'])
def upload_all():
    file = request.files['image']
    if not file:
        return jsonify({'error': 'No file was uploaded.'})

    if not allowed_file(file.filename):
        return jsonify({'error': 'Please upload a JPG or PNG.'})



    # handle image first
    file_hash = hashlib.md5(file.read()).hexdigest()
    save_path = os.path.join(app.config['UPLOAD_FOLDER'], file_hash + '.jpg')
    file.seek(0)
    file.save(save_path)
    feature = questionAnswering.img_handler(save_path)
    if feature is None:
        return jsonify({'error': 'Error reading image.'})

    # image + question
    img_ques_hash = hashlib.md5(file_hash + question).hexdigest()
    json = questionAnswering.get_answers(question, feature, save_path, img_ques_hash, VIZ_FOLDER)

    return jsonify(json)


if __name__ == '__main__':
    setup()
    app.run(host='0.0.0.0', port=5000, debug=False)
